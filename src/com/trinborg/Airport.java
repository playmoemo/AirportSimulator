package com.trinborg;

import java.util.Random;

/**
 * Represents the main platform for the airport simulation program.
 * Created by tborg(Øyvind Trinborg) on 21.01.16.
 * @author Øyvind Trinborg
 */
public class Airport {
    /**
     * The time step that set by the user.
     */
    private int globalTimeStep;
    /**
     * The average landing frequency generated by getPoissonRandom(double mean).
     */
    private int averageLandingFrequency;
    /**
     * The average departure frequency generated by getPoissonRandom(double mean).
     */
    private int averageDepartureFrequency;
    /**
     * The desired frequency parameter for landing used as the mean to getPoissonRandom(double mean),
     * set by the user.
     */
    private double avgLandingFrequency;
    /**
     * The desired frequency parameter for departure used as the mean to getPoissonRandom(double mean),
     * set by the user.
     */
    private double avgDepartureFrequency;
    /**
     * The queue that manages landing planes.
     */
    private CustomQueue<Plane> landingQueue;
    /**
     * The queue that manages departing planes.
     */
    private CustomQueue<Plane> departureQueue;
    /**
     * Mechanism to accumulate, calculate and present statistical data from the simulation.
     */
    private Statistics statistics;
    /**
     * A unique identifier given to each plane when instantiated.
     */
    private int planeId;
    /**
     * Constant to identify a plane's landing action.
     */
    public final char landing = 'L';
    /**
     * Constant to identify a plane's departure action.
     */
    public final char departure = 'D';

    /**
     * Creates an instance of the class and performs assignment of private fields.
     * @param timeStep the global timestep for the simulation set by the user.
     * @param landFreq the desired landing frequency from user input.
     * @param depFreq the desired departure frequency from user input.
     */
    public Airport(int timeStep, double landFreq, double depFreq) {
        globalTimeStep = timeStep;
        avgLandingFrequency = landFreq;
        avgDepartureFrequency = depFreq;
        statistics = new Statistics(timeStep);
        planeId = 0;
    }

    /**
     * The heart of the simulation, where plane-activity is determined by the landing- and departure frequencies,
     * and the airstrip-activity is determined by the status of the queues.
     * This method keeps the user updated on the activity through the output's to the console.
     */
    public void startSimulation() {
        landingQueue = new CustomQueue<Plane>();
        departureQueue = new CustomQueue<Plane>();

        for (int i = 0; i < globalTimeStep; i++) {
            // Print the current timestep to better separate related output
            System.out.println("\n------------------------- Timestep: " + i + " -----------------------------------");
            // Print the current amount of planes in landing queue and departure queue
            System.out.println("LandingQueue: " + landingQueue.getCount() +
                                "\nDepartureQueue: " + departureQueue.getCount() +
                                "\n--------------------");

            System.out.println("Incoming planes for landing: ");
            // Generate landing frequency
            averageLandingFrequency = getPoissonRandom(avgLandingFrequency);
            // Populate landingQueue
            if (averageLandingFrequency == 0) {
                System.out.println("\tNo incoming planes for landing during this timestep.");
            } else {
                // Plane-object instantiation
                for (int j = 0; j < averageLandingFrequency; j++) {
                    Plane pLanding = new Plane(i, planeId++);
                    if (landingQueue.isFull()) {
                        System.out.println("\tPlane: " + pLanding.getPlaneID() + " denied landing. Queue is full.");
                        statistics.incrementTotalRejectedPlanes();
                    } else {
                        landingQueue.enqueue(pLanding);
                        System.out.println("\tPlane: " + pLanding.getPlaneID() + " ready for landing.");
                    }
                }
            }


            System.out.println("Incoming planes for departure: ");
            // Generate departure frequency
            averageDepartureFrequency = getPoissonRandom(avgDepartureFrequency);
            // Populate departureQueue
            if (averageDepartureFrequency == 0) {
                System.out.println("\tNo incoming planes for departure during this timestep.");
            } else {
                // Plane-object instantiation
                for (int k = 0; k < averageDepartureFrequency; k++) {
                    Plane pDeparture = new Plane(i, planeId++);
                    if (departureQueue.isFull()) {
                        System.out.println("\tPlane: " + pDeparture.getPlaneID() + " denied departure. Queue is full.");
                        statistics.incrementTotalRejectedPlanes();
                    } else {
                        departureQueue.enqueue(pDeparture);
                        System.out.println("\tPlane: " + pDeparture.getPlaneID() + " ready for departure.");
                    }
                }
            }

            // Airport activity. Landings, departures, rejections and statistics accumulation
            System.out.println("\nAirstrip activity:");
            if (!landingQueue.isEmpty()) {
                try {
                    Plane landingPlane = landingQueue.dequeue();
                    landingPlane.setTimeStepStop(i);
                    statistics.incrementTotalArrivedPlanes();
                    System.out.println("\tPlane: " + landingPlane.getPlaneID() +
                            " has landed. Waiting time " + landingPlane.getIdleTime() + " timesteps.");
                    statistics.addIdleTime(landingPlane.getIdleTime(), landing);
                } catch (EmptyCollectionException e) {
                    System.out.println("Exception: " + e.toString() + "\nThe landing queue is empty.");
                }
            } else if (!departureQueue.isEmpty()) {
                try {
                    Plane departurePlane = departureQueue.dequeue();
                    departurePlane.setTimeStepStop(i);
                    statistics.incrementTotalDepartedPlanes();
                    System.out.println("\tPlane: " + departurePlane.getPlaneID() +
                            " has left the airport. Waiting time " + departurePlane.getIdleTime() + " timesteps.");
                    statistics.addIdleTime(departurePlane.getIdleTime(), departure);
                } catch (EmptyCollectionException e) {
                    System.out.println("Exception: " + e.toString() + "\nThe departure queue is empty.");
                }

            } else {
                System.out.println("\tThe airport is empty!");
            }
            statistics.addLandingQueueLength(landingQueue.getCount());
            statistics.addDepartureQueueLength(departureQueue.getCount());
        }
        statistics.printStatisticsReport(landingQueue.getCount(), departureQueue.getCount());
    }

    /**
     * Calculates the average frequency of Plane-object instantiation per timestep.
     * @author taken from the assignment's implementation details.
     * @param mean is input from user used when calculating the frequency.
     * @return Plane-object instantiation frequency.
     */
    private int getPoissonRandom(double mean) {
        Random r = new Random();
        double L = Math.exp(-mean);
        int k = 0;
        double p = 1.0;
        do {
            p = p * r.nextDouble();
            k++;
        } while (p > L);
        return k - 1;
    }
}